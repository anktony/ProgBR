{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "-----\r\n# Módulo 9 - DOM Events\r\n* **Fonte:** [ProgBR WebDev FullStack](https://programadorbr.club.hotmart.com/lesson/ZYOmaEYxOd/eventos-parte-13-(dom-events));"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "-----\r\n# Anotações\r\n* DOM Events permitem que o JS registre diferentes event handlers em elementos de um documento HTML;\r\n* Eventos são normalmente usados em combinação com funções, que não serão executadas antes que o evento ocorra;\r\n* ***this*** pode ser passado no evento para se referir ao próprio elemento; ex: **onclick=\"this.style.color= 'red'\"**;\r\n* ***onload*** executa depois que toda a pagina for carregada;\r\n* ***onchange*** só muda quando o elemento perde o foco\r\n* ***oninput*** altera o elemento em tempo real, para cada entrada feita; \r\n* ***.addEventListener(\"click\", função)*** adiciona a execução da função no evento click\r\n* ao passar eventos no javascript, eles perdem o \"on\" e todas letras são minusculas. **Ex: mouseon, mouseover, click**;\r\n* no javascript, se atribuir ao evento uma função com os () ela será executada sozinha, não durante o evento;\r\n* no HTML a função deve ser atribuida com os (), o será interpretado como texto apenas, por estar entre \" \";\r\n\r\n## Event\r\n* **abort**\tThe event occurs when the loading of a media is aborted\t   </>                                                                                          ***UiEvent, Event***\r\n* **afterprint**\tThe event occurs when a page has started printing, or if the print dialogue box has been closed\t                                                ***Event***\r\n* **animationend**\tThe event occurs when a CSS animation has completed                                                                                         \t***AnimationEvent***\r\n* **animationiteration**\tThe event occurs when a CSS animation is repeated\t                                                                                    ***AnimationEvent***\r\n* **animationstart**\tThe event occurs when a CSS animation has started\t                                                                                        ***AnimationEvent***\r\n* **beforeprint**\tThe event occurs when a page is about to be printed\t                                                                                            ***Event***\r\n* **beforeunload**\tThe event occurs before the document is about to be unloaded\t                                                                                ***UiEvent, Event***\r\n* **blur**\tThe event occurs when an element loses focus\t                                                                                                        ***FocusEvent***\r\n* **canplay**\tThe event occurs when the browser can start playing the media (when it has buffered enough to begin)\t                                            ***Event***\r\n* **canplaythrough**\tThe event occurs when the browser can play through the media without stopping for buffering\t                                                ***Event***\r\n* **change**\tThe event occurs when the content of a form element, the selection, or the checked state have changed (for \\<input>, \\<select>, and \\<textarea>)\t***Event***\r\n* **click**\tThe event occurs when the user clicks on an element\t                                                                                                    ***MouseEvent***\r\n* **contextmenu**\tThe event occurs when the user right-clicks on an element to open a context menu\t                                                            ***MouseEvent***\r\n* **copy**\tThe event occurs when the user copies the content of an element\t                                                                                        ***ClipboardEvent***\r\n* **cut**\tThe event occurs when the user cuts the content of an element\t                                                                                        ***ClipboardEvent***\r\n* **dblclick**\tThe event occurs when the user double-clicks on an element\t                                                                                        ***MouseEvent***\r\n* **drag**\tThe event occurs when an element is being dragged\t                                                                                                    ***DragEvent***\r\n* **dragend**\tThe event occurs when the user has finished dragging an element\t                                                                                    ***DragEvent***\r\n* **dragenter**\tThe event occurs when the dragged element enters the drop target\t                                                                                ***DragEvent***\r\n* **dragleave**\tThe event occurs when the dragged element leaves the drop target\t                                                                                ***DragEvent***\r\n* **dragover**\tThe event occurs when the dragged element is over the drop target\t                                                                                ***DragEvent***\r\n* **dragstart**\tThe event occurs when the user starts to drag an element\t                                                                                        ***DragEvent***\r\n* **drop**\tThe event occurs when the dragged element is dropped on the drop target\t                                                                                ***DragEvent***\r\n* **durationchange**\tThe event occurs when the duration of the media is changed\t                                                                                ***Event***\r\n* **ended**\tThe event occurs when the media has reach the end (useful for messages like \"thanks for listening\")\t                                                    ***Event***\r\n* **error**\tThe event occurs when an error occurs while loading an external file\tProgressEvent,UiEvent,                                                          ***Event***\r\n* **focus**\tThe event occurs when an element gets focus\t                                                                                                            ***FocusEvent***\r\n* **focusin**\tThe event occurs when an element is about to get focus\t                                                                                            ***FocusEvent***\r\n* **focusout**\tThe event occurs when an element is about to lose focus\t                                                                                            ***FocusEvent***\r\n* **fullscreenchange**\tThe event occurs when an element is displayed in fullscreen mode\t                                                                        ***Event***\r\n* **fullscreenerror**\tThe event occurs when an element can not be displayed in fullscreen mode\t                                                                ***Event***\r\n* **hashchange**\tThe event occurs when there has been changes to the anchor part of a URL\t                                                                    ***HashChangeEvent***\r\n* **input**\tThe event occurs when an element gets user input\tInputEvent,                                                                                         ***Event***\r\n* **invalid**\tThe event occurs when an element is invalid\t                                                                                                        ***Event***\r\n* **keydown**\tThe event occurs when the user is pressing a key\t                                                                                                ***KeyboardEvent***\r\n* **keypress**\tThe event occurs when the user presses a key\t                                                                                                    ***KeyboardEvent***\r\n* **keyup**\tThe event occurs when the user releases a key\t                                                                                                        ***KeyboardEvent***\r\n* **load**\tThe event occurs when an object has loaded                                                                                                          \t***UiEvent, Event***\r\n* **loadeddata**\tThe event occurs when media data is loaded\t                                                                                                    ***Event***\r\n* **loadedmetadata**\tThe event occurs when meta data (like dimensions and duration) are loaded\t                                                                ***Event***\r\n* **loadstart**\tThe event occurs when the browser starts looking for the specified media\t                                                                        ***ProgressEvent***\r\n* **message**\tThe event occurs when a message is received through the event source\t                                                                            ***Event***\r\n* **mousedown**\tThe event occurs when the user presses a mouse button over an element\t                                                                            ***MouseEvent***\r\n* **mouseenter**\tThe event occurs when the pointer is moved onto an element                                                                                  \t***MouseEvent***\r\n* **mouseleave**\tThe event occurs when the pointer is moved out of an element\t                                                                                ***MouseEvent***\r\n* **mousemove**\tThe event occurs when the pointer is moving while it is over an element\t                                                                            ***MouseEvent***\r\n* **mouseover**\tThe event occurs when the pointer is moved onto an element, or onto one of its children\t                                                            ***MouseEvent***\r\n* **mouseout**\tThe event occurs when a user moves the mouse pointer out of an element, or out of one of its children\t                                            ***MouseEvent***\r\n* **mouseup**\tThe event occurs when a user releases a mouse button over an element\t                                                                            ***MouseEvent***\r\n* **mousewheel**\tDeprecated. Use the wheel event instead\t                                                                                                        ***WheelEvent***\r\n* **offline**\tThe event occurs when the browser starts to work offline\t                                                                                        ***Event***\r\n* **online**\tThe event occurs when the browser starts to work online\t                                                                                            ***Event***\r\n* **open**\tThe event occurs when a connection with the event source is opened\t                                                                                    ***Event***\r\n* **pagehide**\tThe event occurs when the user navigates away from a webpage\t                                                                                    ***PageTransitionEvent***\r\n* **pageshow**\tThe event occurs when the user navigates to a webpage\t                                                                                            ***PageTransitionEvent***\r\n* **paste**\tThe event occurs when the user pastes some content in an element\t                                                                                    ***ClipboardEvent***\r\n* **pause**\tThe event occurs when the media is paused either by the user or programmatically\t                                                                    ***Event***\r\n* **play**\tThe event occurs when the media has been started or is no longer paused\t                                                                                ***Event***\r\n* **playing**\tThe event occurs when the media is playing after having been paused or stopped for buffering\t                                                    ***Event***\r\n* **popstate**\tThe event occurs when the window's history changes\t                                                                                                ***PopStateEvent***\r\n* **progress**\tThe event occurs when the browser is in the process of getting the media data (downloading the media)\t                                            ***Event***\r\n* **ratechange**\tThe event occurs when the playing speed of the media is changed\t                                                                                ***Event***\r\n* **resize**\tThe event occurs when the document view is resized\tUiEvent,                                                                                        ***Event***\r\n* **reset**\tThe event occurs when a form is reset\t                                                                                                                ***Event***\r\n* **scroll**\tThe event occurs when an element's scrollbar is being scrolled\tUiEvent,                                                                            ***Event***\r\n* **search**\tThe event occurs when the user writes something in a search field (for \\<input=\"search\">)\t                                                        ***Event***\r\n* **seeked**\tThe event occurs when the user is finished moving/skipping to a new position in the media\t                                                        ***Event***\r\n* **seeking**\tThe event occurs when the user starts moving/skipping to a new position in the media\t                                                            ***Event***\r\n* **select**\tThe event occurs after the user selects some text (for \\<input> and \\<textarea>)\t                                                                ***UiEvent, Event***\r\n* **show**\tThe event occurs when a \\<menu> element is shown as a context menu\t                                                                                    ***Event***\r\n* **stalled**\tThe event occurs when the browser is trying to get media data, but data is not available\t                                                        ***Event***\r\n* **storage**\tThe event occurs when a Web Storage area is updated\t                                                                                                ***StorageEvent***\r\n* **submit**\tThe event occurs when a form is submitted\t                                                                                                        ***Event***\r\n* **suspend**\tThe event occurs when the browser is intentionally not getting media data\t                                                                        ***Event***\r\n* **timeupdate**\tThe event occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\t                    ***Event***\r\n* **toggle**\tThe event occurs when the user opens or closes the \\<details> element\t                                                                            ***Event***\r\n* **touchcancel**\tThe event occurs when the touch is interrupted\t                                                                                                ***TouchEvent***\r\n* **touchend**\tThe event occurs when a finger is removed from a touch screen\t                                                                                    ***TouchEvent***\r\n* **touchmove**\tThe event occurs when a finger is dragged across the screen\t                                                                                        ***TouchEvent***\r\n* **touchstart**\tThe event occurs when a finger is placed on a touch screen\t                                                                                    ***TouchEvent***\r\n* **transitionend**\tThe event occurs when a CSS transition has completed\t                                                                                        ***TransitionEvent***\r\n* **unload**\tThe event occurs once a page has unloaded (for \\<body>)\tUiEvent,                                                                                    ***Event***\r\n* **volumechange**\tThe event occurs when the volume of the media has changed (includes setting the volume to \"mute\")\t                                            ***Event***\r\n* **waiting**\tThe event occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\t                            ***Event***\r\n* **wheel**\tThe event occurs when the mouse wheel rolls up or down over an element\t                                                                                ***WheelEvent***\r\n\r\n# HTML DOM Event Properties and Methods\r\n## Property/Method   -   Description   -   Belongs To\r\n\r\n* **altKey**\tReturns whether the \"ALT\" key was pressed when the mouse event was triggered\t***MouseEvent***\r\n* **altKey**\tReturns whether the \"ALT\" key was pressed when the key event was triggered\t***KeyboardEvent,TouchEvent***\r\n* **animationName**\tReturns the name of the animation\t***AnimationEvent***\r\n* **bubbles**\tReturns whether or not a specific event is a bubbling event\t***Event***\r\n* **button**\tReturns which mouse button was pressed when the mouse event was triggered\t***MouseEvent***\r\n* **buttons**\tReturns which mouse buttons were pressed when the mouse event was triggered\t***MouseEvent***\r\n* **cancelable**\tReturns whether or not an event can have its default action prevented\t***Event***\r\n* **charCode**\tReturns the Unicode character code of the key that triggered the onkeypress event\t***KeyboardEvent***\r\n* **changeTouches**\tReturns a list of all the touch objects whose state changed between the previous touch and this touch\t***TouchEvent***\r\n* **clientX**\tReturns the horizontal coordinate of the mouse pointer, relative to the current window, when the mouse event was triggered\t***MouseEvent,TouchEvent***\r\n* **clientY**\tReturns the vertical coordinate of the mouse pointer, relative to the current window, when the mouse event was triggered\t***MouseEvent,TouchEvent***\r\n* **clipboardData**\tReturns an object containing the data affected by the clipboard operation\t***ClipboardData***\r\n* **code**\tReturns the code of the key that triggered the event\t***KeyboardEvent***\r\n* **composed**\tReturns whether the event is composed or not\t***Event***\r\n* **createEvent()**\tCreates a new event\t***Event***\r\n* **ctrlKey**\tReturns whether the \"CTRL\" key was pressed when the mouse event was triggered\t***MouseEvent***\r\n* **ctrlKey**\tReturns whether the \"CTRL\" key was pressed when the key event was triggered\t***KeyboardEvent,TouchEvent***\r\n* **currentTarget**\tReturns the element whose event listeners triggered the event\t***Event***\r\n* **data**\tReturns the inserted characters\t***InputEvent***\r\n* **dataTransfer**\tReturns an object containing the data being dragged/dropped, or inserted/deleted\t***DragEvent, InputEvent***\r\n* **defaultPrevented**\tReturns whether or not the preventDefault() method was called for the event\t***Event***\r\n* **deltaX**\tReturns the horizontal scroll amount of a mouse wheel (x-axis)\t***WheelEvent***\r\n* **deltaY**\tReturns the vertical scroll amount of a mouse wheel (y-axis)\t***WheelEvent***\r\n* **deltaZ**\tReturns the scroll amount of a mouse wheel for the z-axis\t***WheelEvent***\r\n* **deltaMode**\tReturns a number that represents the unit of measurements for delta values (pixels, lines or pages)\t***WheelEvent***\r\n* **detail**\tReturns a number that indicates how many times the mouse was clicked\t***UiEvent***\r\n* **elapsedTime**\tReturns the number of seconds an animation has been running\t***AnimationEvent***\r\n* **elapsedTime**\tReturns the number of seconds a transition has been running\t ***\r\n* **eventPhase**\tReturns which phase of the event flow is currently being evaluated\t***Event***\r\n* **getTargetRanges()**\tReturns an array containing target ranges that will be affected by the insertion/deletion\t***InputEvent***\r\n* **getModifierState()**\tReturns an array containing target ranges that will be affected by the insertion/deletion\t***MouseEvent***\r\n* **inputType**\tReturns the type of the change (i.e \"inserting\" or \"deleting\")\t***InputEvent***\r\n* **isComposing**\tReturns whether the state of the event is composing or not\t***InputEvent,KeyboardEvent***\r\n* **isTrusted**\tReturns whether or not an event is trusted\t***Event***\r\n* **key**\tReturns the key value of the key represented by the event\t***KeyboardEvent***\r\n* **key**\tReturns the key of the changed storage item\t ***StorageEvent***\r\n* **keyCode**\tReturns the Unicode character code of the key that triggered the onkeypress event, or the Unicode key code of the key that triggered the onkeydown or onkeyup event\t***KeyboardEvent***\r\n* **location**\tReturns the location of a key on the keyboard or device ***SKeyboardEvent***\r\n* **lengthComputable**\tReturns whether the length of the progress can be computable or not ***SProgressEvent***\r\n* **loaded**\tReturns how much work has been loaded ***SProgressEvent***\r\n* **metaKey**\tReturns whether the \"META\" key was pressed when an event was triggered ***SMouseEvent***\r\n* **metaKey**\tReturns whether the \"meta\" key was pressed when the key event was triggered\t***KeyboardEvent,TouchEvent***\r\n* **MovementX**\tReturns the horizontal coordinate of the mouse pointer relative to the position of the last mousemove event ***MouseEvent***\r\n* **MovementY**\tReturns the vertical coordinate of the mouse pointer relative to the position of the last mousemove event\t***MouseEvent***\r\n* **newValue**\tReturns the new value of the changed storage item\t***StorageEvent***\r\n* **newURL**\tReturns the URL of the document, after the hash has been changed\t***HasChangeEvent***\r\n* **offsetX**\tReturns the horizontal coordinate of the mouse pointer relative to the position of the edge of the target element\t***MouseEvent***\r\n* **offsetY**\tReturns the vertical coordinate of the mouse pointer relative to the position of the edge of the target element\t***MouseEvent***\r\n* **oldValue**\tReturns the old value of the changed storage item\t***StorageEvent***\r\n* **oldURL**\tReturns the URL of the document, before the hash was changed\t***HasChangeEvent***\r\n* **onemptied**\tThe event occurs when something bad happens and the media file is suddenly unavailable (like unexpectedly disconnects)\t ***\r\n* **pageX**\tReturns the horizontal coordinate of the mouse pointer, relative to the document, when the mouse event was triggered\t***MouseEvent***\r\n* **pageY**\tReturns the vertical coordinate of the mouse pointer, relative to the document, when the mouse event was triggered\t***MouseEvent***\r\n* **persisted**\tReturns whether the webpage was cached by the browser\t***PageTransitionEvent***\r\n* **preventDefault()**\tCancels the event if it is cancelable, meaning that the default action that belongs to the event will not occur\t***Event***\r\n* **propertyName**\tReturns the name of the CSS property associated with the animation or transition\t***AnimationEvent,TransitionEvent***\r\n* **pseudoElement**\tReturns the name of the pseudo-element of the animation or transition\t***AAnimationEvent,TransitionEvent***\r\n* **region**\t\t***AMouseEvent***\r\n* **relatedTarget**\tReturns the element related to the element that triggered the mouse event\t***AMouseEvent***\r\n* **relatedTarget**\tReturns the element related to the element that triggered the event\t***AFocusEvent***\r\n* **repeat**\tReturns whether a key is being hold down repeatedly, or not\t***AKeyboardEvent***\r\n* **screenX**\tReturns the horizontal coordinate of the mouse pointer, relative to the screen, when an event was triggered\t***AMouseEvent***\r\n* **screenY**\tReturns the vertical coordinate of the mouse pointer, relative to the screen, when an event was triggered\t***AMouseEvent***\r\n* **shiftKey**\tReturns whether the \"SHIFT\" key was pressed when an event was triggered\t***AMouseEvent***\r\n* **shiftKey**\tReturns whether the \"SHIFT\" key was pressed when the key event was triggered\t***KeyboardEvent,TouchEvent***\r\n* **state**\tReturns an object containing a copy of the history entries\t***PopStateEvent***\r\n* **stopImmediatePropagation()**\tPrevents other listeners of the same event from being called\t***Event***\r\n* **stopPropagation()**\tPrevents further propagation of an event during event flow\t***Event***\r\n* **storageArea**\tReturns an object representing the affected storage object\t***StorageEvent***\r\n* **target**\tReturns the element that triggered the event\t***Event***\r\n* **targetTouches**\tReturns a list of all the touch objects that are in contact with the surface and where the touchstart event occured on the same target element as the current target ***element\tTouchEvent***\r\n* **timeStamp**\tReturns the time (in milliseconds relative to the epoch) at which the event was created\t***Event***\r\n* **total**\tReturns the total amount of work that will be loaded\t***ProgressEvent***\r\n* **touches**\tReturns a list of all the touch objects that are currently in contact with the surface\t***TouchEvent***\r\n* **transitionend**\tThe event occurs when a CSS transition has completed\t***TransitionEvent***\r\n* **type**\tReturns the name of the event\t***Event***\r\n* **url**\tReturns the URL of the changed item's document\t***StorageEvent***\r\n* **which**\tReturns which mouse button was pressed when the mouse event was triggered\t***MouseEvent***\r\n* **which**\tReturns the Unicode character code of the key that triggered the onkeypress event, or the Unicode key code of the key that triggered the onkeydown or onkeyup event\t***KeyboardEvent***\r\n* **view**\tReturns a reference to the Window object where the event occurred\t***UiEvent***\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "-----\r\n# Conceitos e Expressões\r\n* physics material: Material usado para ajustar friction e bounciness;"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "-----\r\n# Observações:\r\n* sempre que for trabalhar com UI Elements é necessario importar UnityEgine.UI;\r\n"
            ],
            "outputs": []
        }
    ]
}